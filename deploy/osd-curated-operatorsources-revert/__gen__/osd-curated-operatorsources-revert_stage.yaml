apiVersion: hive.openshift.io/v1
kind: SelectorSyncSet
metadata:
  labels:
    managed.openshift.io/gitHash: ${IMAGE_TAG}
    managed.openshift.io/gitRepoName: ${REPO_NAME}
    managed.openshift.io/osd: 'true'
  name: osd-curated-operatorsources-revert
spec:
  clusterDeploymentSelector:
    matchLabels:
      api.openshift.com/managed: 'true'
    matchExpressions:
    - key: api.openshift.com/extended-dedicated-admin
      operator: NotIn
      values:
      - 'false'
  resourceApplyMode: Sync
  patches:
  - apiVersion: config.openshift.io/v1
    applyMode: AlwaysApply
    kind: OperatorHub
    name: cluster
    patch: '{"spec":{"disableAllDefaultSources":false}}'
    patchType: merge
  resources:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: osd-patch-subscription-source
      namespace: openshift-marketplace
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: osd-patch-subscription-source
    rules:
    - apiGroups:
      - operators.coreos.com
      resources:
      - subscriptions
      verbs:
      - patch
      - get
      - list
  - kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: osd-patch-subscription-source
    subjects:
    - kind: ServiceAccount
      name: osd-patch-subscription-source
      namespace: openshift-marketplace
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: osd-patch-subscription-source
  - apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: osd-patch-subscription-source
      namespace: openshift-marketplace
    spec:
      failedJobsHistoryLimit: 5
      successfulJobsHistoryLimit: 3
      concurrencyPolicy: Replace
      schedule: 0 */1 * * *
      jobTemplate:
        spec:
          ttlSecondsAfterFinished: 86400
          template:
            spec:
              affinity:
                nodeAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                  - preference:
                      matchExpressions:
                      - key: node-role.kubernetes.io/infra
                        operator: Exists
                    weight: 1
              tolerations:
              - effect: NoSchedule
                key: node-role.kubernetes.io/infra
                operator: Exists
              serviceAccountName: osd-patch-subscription-source
              restartPolicy: Never
              containers:
              - name: osd-patch-subscription-source
                image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                imagePullPolicy: Always
                args:
                - /bin/bash
                - -c
                - "# Script run as an idempotent cronjob to fix existing subscriptions\
                  \ when disabling OSD operator curation.\n\n# for each type of source\
                  \ (redhat, certified, communit)\n# AND for each namespace having\
                  \ a subscription with a curated community source\n# AND for each\
                  \ subscription having a curated source\n# patch the source\n# NOTE\
                  \ there are loops for each source to keep the jsonpath simple and\
                  \ the logic easy to read\n\necho START\nfor NS in $(oc get subscription\
                  \ -A -o jsonpath='{.items[?(@.spec.source==\"osd-curated-redhat-operators\"\
                  )].metadata.namespace}');\ndo\n  for SUB in $(oc -n $NS get subscription\
                  \ -o jsonpath='{.items[?(@.spec.source==\"osd-curated-redhat-operators\"\
                  )].metadata.name}');\n  do\n    echo \"Patching subscription '$SUB'\
                  \ in namespace '$NS'\"\n    oc -n $NS patch subscription $SUB --patch\
                  \ '{\"spec\":{\"source\":\"redhat-operators\"}}' --type merge\n\
                  \  done\ndone\n\nfor NS in $(oc get subscription -A -o jsonpath='{.items[?(@.spec.source==\"\
                  osd-curated-certified-operators\")].metadata.namespace}');\ndo\n\
                  \  for SUB in $(oc -n $NS get subscription -o jsonpath='{.items[?(@.spec.source==\"\
                  osd-curated-certified-operators\")].metadata.name}');\n  do\n  \
                  \  echo \"Patching subscription '$SUB' in namespace '$NS'\"\n  \
                  \  oc -n $NS patch subscription $SUB --patch '{\"spec\":{\"source\"\
                  :\"certified-operators\"}}' --type merge\n  done\ndone\n\nfor NS\
                  \ in $(oc get subscription -A -o jsonpath='{.items[?(@.spec.source==\"\
                  osd-curated-community-operators\")].metadata.namespace}');\ndo\n\
                  \  for SUB in $(oc -n $NS get subscription -o jsonpath='{.items[?(@.spec.source==\"\
                  osd-curated-community-operators\")].metadata.name}');\n  do\n  \
                  \  echo \"Patching subscription '$SUB' in namespace '$NS'\"\n  \
                  \  oc -n $NS patch subscription $SUB --patch '{\"spec\":{\"source\"\
                  :\"community-operators\"}}' --type merge\n  done\ndone\necho FINISH\n"
